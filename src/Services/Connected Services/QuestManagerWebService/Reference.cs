//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Services.QuestManagerWebService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="questmanager_webservice", ConfigurationName="QuestManagerWebService.questmanager_webserviceSoap")]
    public interface questmanager_webserviceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="questmanager_webservice/qm_insert_update", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string qm_insert_update(string license_id, string permission_id, string xml_data);
        
        [System.ServiceModel.OperationContractAttribute(Action="questmanager_webservice/qm_insert_update", ReplyAction="*")]
        System.Threading.Tasks.Task<string> qm_insert_updateAsync(string license_id, string permission_id, string xml_data);
        
        [System.ServiceModel.OperationContractAttribute(Action="questmanager_webservice/qm_insert_update_send_ext_notif", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string qm_insert_update_send_ext_notif(string license_id, string permission_id, string xml_data);
        
        [System.ServiceModel.OperationContractAttribute(Action="questmanager_webservice/qm_insert_update_send_ext_notif", ReplyAction="*")]
        System.Threading.Tasks.Task<string> qm_insert_update_send_ext_notifAsync(string license_id, string permission_id, string xml_data);
        
        [System.ServiceModel.OperationContractAttribute(Action="questmanager_webservice/qm_delete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string qm_delete(string license_id, string permission_id, string xml_data);
        
        [System.ServiceModel.OperationContractAttribute(Action="questmanager_webservice/qm_delete", ReplyAction="*")]
        System.Threading.Tasks.Task<string> qm_deleteAsync(string license_id, string permission_id, string xml_data);
        
        [System.ServiceModel.OperationContractAttribute(Action="questmanager_webservice/qm_delete_send_ext_notif", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string qm_delete_send_ext_notif(string license_id, string permission_id, string xml_data);
        
        [System.ServiceModel.OperationContractAttribute(Action="questmanager_webservice/qm_delete_send_ext_notif", ReplyAction="*")]
        System.Threading.Tasks.Task<string> qm_delete_send_ext_notifAsync(string license_id, string permission_id, string xml_data);
        
        [System.ServiceModel.OperationContractAttribute(Action="questmanager_webservice/qm_select", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string qm_select(string license_id, string permission_id, string xml_data);
        
        [System.ServiceModel.OperationContractAttribute(Action="questmanager_webservice/qm_select", ReplyAction="*")]
        System.Threading.Tasks.Task<string> qm_selectAsync(string license_id, string permission_id, string xml_data);
        
        [System.ServiceModel.OperationContractAttribute(Action="questmanager_webservice/qm_select3", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string qm_select3(string license_id, string permission_id, string register_id, string search_mode_int, string xml_data);
        
        [System.ServiceModel.OperationContractAttribute(Action="questmanager_webservice/qm_select3", ReplyAction="*")]
        System.Threading.Tasks.Task<string> qm_select3Async(string license_id, string permission_id, string register_id, string search_mode_int, string xml_data);
        
        [System.ServiceModel.OperationContractAttribute(Action="questmanager_webservice/qm_select2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string qm_select2(string license_id, string permission_id, string dt1, string dt2, string dt_mode_int, string xml_data);
        
        [System.ServiceModel.OperationContractAttribute(Action="questmanager_webservice/qm_select2", ReplyAction="*")]
        System.Threading.Tasks.Task<string> qm_select2Async(string license_id, string permission_id, string dt1, string dt2, string dt_mode_int, string xml_data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface questmanager_webserviceSoapChannel : Services.QuestManagerWebService.questmanager_webserviceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class questmanager_webserviceSoapClient : System.ServiceModel.ClientBase<Services.QuestManagerWebService.questmanager_webserviceSoap>, Services.QuestManagerWebService.questmanager_webserviceSoap {
        
        public questmanager_webserviceSoapClient() {
        }
        
        public questmanager_webserviceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public questmanager_webserviceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public questmanager_webserviceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public questmanager_webserviceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string qm_insert_update(string license_id, string permission_id, string xml_data) {
            return base.Channel.qm_insert_update(license_id, permission_id, xml_data);
        }
        
        public System.Threading.Tasks.Task<string> qm_insert_updateAsync(string license_id, string permission_id, string xml_data) {
            return base.Channel.qm_insert_updateAsync(license_id, permission_id, xml_data);
        }
        
        public string qm_insert_update_send_ext_notif(string license_id, string permission_id, string xml_data) {
            return base.Channel.qm_insert_update_send_ext_notif(license_id, permission_id, xml_data);
        }
        
        public System.Threading.Tasks.Task<string> qm_insert_update_send_ext_notifAsync(string license_id, string permission_id, string xml_data) {
            return base.Channel.qm_insert_update_send_ext_notifAsync(license_id, permission_id, xml_data);
        }
        
        public string qm_delete(string license_id, string permission_id, string xml_data) {
            return base.Channel.qm_delete(license_id, permission_id, xml_data);
        }
        
        public System.Threading.Tasks.Task<string> qm_deleteAsync(string license_id, string permission_id, string xml_data) {
            return base.Channel.qm_deleteAsync(license_id, permission_id, xml_data);
        }
        
        public string qm_delete_send_ext_notif(string license_id, string permission_id, string xml_data) {
            return base.Channel.qm_delete_send_ext_notif(license_id, permission_id, xml_data);
        }
        
        public System.Threading.Tasks.Task<string> qm_delete_send_ext_notifAsync(string license_id, string permission_id, string xml_data) {
            return base.Channel.qm_delete_send_ext_notifAsync(license_id, permission_id, xml_data);
        }
        
        public string qm_select(string license_id, string permission_id, string xml_data) {
            return base.Channel.qm_select(license_id, permission_id, xml_data);
        }
        
        public System.Threading.Tasks.Task<string> qm_selectAsync(string license_id, string permission_id, string xml_data) {
            return base.Channel.qm_selectAsync(license_id, permission_id, xml_data);
        }
        
        public string qm_select3(string license_id, string permission_id, string register_id, string search_mode_int, string xml_data) {
            return base.Channel.qm_select3(license_id, permission_id, register_id, search_mode_int, xml_data);
        }
        
        public System.Threading.Tasks.Task<string> qm_select3Async(string license_id, string permission_id, string register_id, string search_mode_int, string xml_data) {
            return base.Channel.qm_select3Async(license_id, permission_id, register_id, search_mode_int, xml_data);
        }
        
        public string qm_select2(string license_id, string permission_id, string dt1, string dt2, string dt_mode_int, string xml_data) {
            return base.Channel.qm_select2(license_id, permission_id, dt1, dt2, dt_mode_int, xml_data);
        }
        
        public System.Threading.Tasks.Task<string> qm_select2Async(string license_id, string permission_id, string dt1, string dt2, string dt_mode_int, string xml_data) {
            return base.Channel.qm_select2Async(license_id, permission_id, dt1, dt2, dt_mode_int, xml_data);
        }
    }
}
